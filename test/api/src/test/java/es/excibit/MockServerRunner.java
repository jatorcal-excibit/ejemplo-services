package es.excibit;

import static net.serenitybdd.rest.SerenityRest.rest;
import com.sun.xml.bind.v2.schemagen.xmlschema.List;
import es.excibit.happi.mockserver.api.MockServerRequest;
import es.excibit.happi.utils.JsonUtils;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.MediaType;
import io.restassured.builder.MultiPartSpecBuilder;
import io.restassured.response.Response;

/**
 * The Class MockServerRunner.
 */
public class MockServerRunner {

  
  /** The Constant MOCKSERVER_REGISTER. */
  private static final String MOCKSERVER_REGISTER = "/mockserver/register";
  
  /** The Constant MOCKSERVER_UNREGISTER. */
  private static final String MOCKSERVER_UNREGISTER = "/mockserver/unregister";
  
  /** The Constant MOCKSERVER_LIST. */
  private static final String MOCKSERVER_LIST = "/mockserver/list";
  
  
  /**
   * Start the apisprout mock server with the yml.
   *
   * @param mockServerFilePath the mockServerFilePath
   * @param requestMapping the request mapping
   * @param method method
   * @throws Exception the exception
   */
  public void upMockServer(String mockServerFilePath, String requestMapping, String method) throws Exception {

    // Get Url
    String url = ApiVariables.getMockServerServicesUrl(MOCKSERVER_REGISTER);
    
    // Get Params
    File requestJson = writeJson(requestMapping, method);
    File mockServerFile = new ClassPathResource(mockServerFilePath).getFile();

    
    Response restResponse = rest().relaxedHTTPSValidation().header("Content-Type", "multipart/form-data")
        .multiPart(new MultiPartSpecBuilder(mockServerFile).controlName("file").mimeType("text/yaml").fileName(mockServerFile.getName())
            .charset("UTF-8").build())
        .multiPart(new MultiPartSpecBuilder(requestJson).controlName("mockServerRequest").mimeType("application/json").fileName(requestJson.getName())
            .charset("UTF-8").build())
        .post(url);
    
    restResponse.then().statusCode(200);

  }

  /**
   * Stop and remove the mock server.
   *
   * @param requestMapping the request mapping
   * @throws Exception the exception
   */
  public void stopMockServer(String requestMapping) throws Exception {

    // Get Url
    String url = ApiVariables.getMockServerServicesUrl(MOCKSERVER_UNREGISTER);
    
    // Get Url
    MockServerRequest mockServerRequest =
        MockServerRequest.builder().application("redsys").hasResponse("true").method("post").requestMapping(requestMapping).build();

    Response restResponse = rest().relaxedHTTPSValidation().header("Content-Type", MediaType.APPLICATION_JSON_VALUE).body(mockServerRequest).delete(url);

    restResponse.then().statusCode(200);
  }

  
  /**
   * Get mockserver list.
   *
   * @param requestMapping the request mapping
   * @throws Exception the exception
   */
  public boolean getMockServer(String requestMapping) throws Exception {

    // Get Url
    String url = ApiVariables.getMockServerServicesUrl(MOCKSERVER_LIST);

    Response restResponse = rest().relaxedHTTPSValidation().header("Content-Type", MediaType.APPLICATION_JSON_VALUE).get(url);
    
    return (restResponse.getBody().jsonPath().get("[?(@.requestMapping==" + requestMapping)!= null) ? false : true;
    
  }

  /**
   * Write json.
   *
   * @param requestMapping the request mapping
   * @param method method
   * @return the file
   * @throws IOException Signals that an I/O exception has occurred.
   */
  private File writeJson(String requestMapping, String method) throws IOException {
    
    MockServerRequest mockServerRequest =
        MockServerRequest.builder().application("redsys").hasResponse("true").method(method).requestMapping(requestMapping).build();

    String json = JsonUtils.convertObjectToJsonString(mockServerRequest);
    
    File autogenerateFolder = new ClassPathResource("json/autogenerated/NOBORRAR").getFile().getParentFile();

    String requestJson = autogenerateFolder.getAbsolutePath() + "/request.json";
    Files.writeString(Paths.get(requestJson), json, StandardCharsets.ISO_8859_1);

    return new File(requestJson);
  }
}
